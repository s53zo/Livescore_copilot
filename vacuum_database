#!/usr/bin/env python3
import sqlite3
import argparse
import logging
import sys
import os
from datetime import datetime

class DatabaseMaintenance:
    def __init__(self, db_path, log_path=None):
        self.db_path = db_path
        self.setup_logging(log_path)
        
    def setup_logging(self, log_path=None):
        """Configure logging to both file and console"""
        self.logger = logging.getLogger('DatabaseMaintenance')
        self.logger.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        
        # Console handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        # File handler (if log path is provided)
        if log_path:
            os.makedirs(os.path.dirname(log_path), exist_ok=True)
            file_handler = logging.FileHandler(log_path)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)

    def get_database_size(self):
        """Get database file size in MB"""
        try:
            size_bytes = os.path.getsize(self.db_path)
            return round(size_bytes / (1024 * 1024), 2)
        except OSError as e:
            self.logger.error(f"Error getting database size: {e}")
            return None

    def vacuum_database(self):
        """Perform VACUUM on the database"""
        try:
            initial_size = self.get_database_size()
            self.logger.info(f"Initial database size: {initial_size} MB")
            
            start_time = datetime.now()
            self.logger.info("Starting VACUUM operation...")
            
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("VACUUM")
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            final_size = self.get_database_size()
            space_saved = round(initial_size - final_size, 2)
            
            self.logger.info(f"VACUUM completed in {duration:.1f} seconds")
            self.logger.info(f"Final database size: {final_size} MB")
            self.logger.info(f"Space reclaimed: {space_saved} MB")
            
            return True
            
        except sqlite3.Error as e:
            self.logger.error(f"SQLite error during VACUUM: {e}")
            return False
        except Exception as e:
            self.logger.error(f"Unexpected error during VACUUM: {e}")
            return False

    def analyze_database(self):
        """Perform ANALYZE on the database"""
        try:
            self.logger.info("Starting ANALYZE operation...")
            start_time = datetime.now()
            
            with sqlite3.connect(self.db_path) as conn:
                # Analyze specific tables
                tables = ['contest_scores', 'band_breakdown', 'qth_info']
                for table in tables:
                    self.logger.info(f"Analyzing table: {table}")
                    conn.execute(f"ANALYZE {table}")
                
                # Analyze entire database
                conn.execute("ANALYZE")
            
            duration = (datetime.now() - start_time).total_seconds()
            self.logger.info(f"ANALYZE completed in {duration:.1f} seconds")
            
            return True
            
        except sqlite3.Error as e:
            self.logger.error(f"SQLite error during ANALYZE: {e}")
            return False
        except Exception as e:
            self.logger.error(f"Unexpected error during ANALYZE: {e}")
            return False

    def optimize_database(self):
        """Perform full database optimization"""
        try:
            self.logger.info("Starting database optimization...")
            start_time = datetime.now()
            
            # First ANALYZE to update statistics
            if not self.analyze_database():
                return False
                
            # Then VACUUM to reclaim space
            if not self.vacuum_database():
                return False
            
            duration = (datetime.now() - start_time).total_seconds()
            self.logger.info(f"Database optimization completed in {duration:.1f} seconds")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Error during optimization: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description='Database Maintenance Utility')
    parser.add_argument('--db', default='/opt/livescore/contest_data.db',
                      help='Database file path')
    parser.add_argument('--log', default='/opt/livescore/logs/maintenance.log',
                      help='Log file path')
    parser.add_argument('--operation', choices=['vacuum', 'analyze', 'all'],
                      default='all', help='Maintenance operation to perform')
    
    args = parser.parse_args()
    
    maintenance = DatabaseMaintenance(args.db, args.log)
    
    if args.operation == 'vacuum':
        maintenance.vacuum_database()
    elif args.operation == 'analyze':
        maintenance.analyze_database()
    else:
        maintenance.optimize_database()

if __name__ == "__main__":
    main()
